const express = require('express');
const router = express.Router();
const multer = require('multer');
const cloudinary = require('../utils/cloudinary');
const Video = require('../models/Video');
const stream = require('stream');

// Multer setup for file uploads (in memory)
const storage = multer.memoryStorage(); // Store files in memory instead of disk
const upload = multer({ storage });

// Add a new video
router.post('/add', upload.single('video'), async (req, res) => {
  try {
    const { name, description } = req.body;

    // Upload video to Cloudinary
    const videoUpload = await new Promise((resolve, reject) => {
      const uploadStream = cloudinary.uploader.upload_stream(
        { resource_type: 'video', folder: 'videos' },
        (error, result) => {
          if (error) {
            console.error('Error uploading video to Cloudinary:', error);
            return reject(error);
          }
          resolve(result);
        }
      );

      // Use the buffer from multer to create a readable stream
      const bufferStream = new stream.PassThrough();
      bufferStream.end(req.file.buffer);
      bufferStream.pipe(uploadStream);
    });

    // Generate a thumbnail from the video and upload it as an image
    const thumbnailUpload = await new Promise((resolve, reject) => {
      const uploadStream = cloudinary.uploader.upload_stream(
        {
          resource_type: 'image', // Ensure the thumbnail is treated as an image
          folder: 'thumbnails',
          transformation: [
            { width: 320, height: 240, crop: 'fill' }, // Resize the thumbnail
            { start_offset: '1' }, // Capture the thumbnail at 1 second
            { format: 'jpg' }, // Ensure the thumbnail is in image format (e.g., JPG)
          ],
        },
        (error, result) => {
          if (error) {
            console.error('Error generating thumbnail:', error);
            return reject(error);
          }
          resolve(result);
        }
      );

      // Use the video URL to fetch the frame and pipe it to Cloudinary
      const videoStream = cloudinary.utils.download_stream(videoUpload.secure_url);
      videoStream.pipe(uploadStream);
    });

    // Save video metadata to the database
    const video = new Video({
      name,
      description,
      videoUrl: videoUpload.secure_url,
      thumbnailUrl: thumbnailUpload.secure_url, // Use the image thumbnail URL
    });
    await video.save();

    res.status(201).json({ message: 'Video added successfully', video });
  } catch (error) {
    console.error('Error adding video:', error);
    res.status(500).json({ message: 'Server error' });
  }
});

// Get all videos
router.get('/latest', async (req, res) => {
  try {
    const videos = await Video.find().sort({ createdAt: -1 });
    res.status(200).json(videos);
  } catch (error) {
    console.error('Error fetching videos:', error);
    res.status(500).json({ message: 'Server error' });
  }
});

module.exports = router;